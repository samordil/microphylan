/*
* --------------------------------------------------------------
*   KWTRP HPC profile for Microphylan (Kemri Cluster)
* --------------------------------------------------------------
*/

params {
    config_profile_name        = 'kemri'
    config_profile_description = 'KWTRP HPC profile for Microphylan pipeline'
    config_profile_contact     = 'Samuel Odoyo (@sodoyo)'
    config_profile_url         = 'kwtrp-peo github page'

    apptainer_cache_dir        = "/scratch/.apptainerCache"
}

// --------------------------------------------------------------
// SLURM executor configuration
// --------------------------------------------------------------
executor {
    name            = 'slurm'
    queueSize       = 20
    submitRateLimit = '6/1min'
}

// --------------------------------------------------------------
// Apptainer runtime configuration
// --------------------------------------------------------------
apptainer {
    enabled    = true
    autoMounts = true
    cacheDir   = params.apptainer_cache_dir
}

// --------------------------------------------------------------
// Process-level defaults and queue logic
// --------------------------------------------------------------
process {

    scratch = true
    cache   = 'lenient'

    // Optional: activate conda env if used inside Apptainer
    beforeScript = 'eval "$(conda shell.bash hook)" && conda activate apptainer-env'

    // Dynamic partition (queue) assignment
    queue = {
        if (task.memory > 80.GB) {
            return 'highmem'
        } else if (task.time > 16.h) {
            return 'longrun'
        } else {
            return 'longrun'  // Fallback to longrun instead of debug
        }
    }

    // Reasonable defaults for unlabelled processes
    cpus   = { 4 * task.attempt }
    memory = { 16.GB * task.attempt }
    time   = { 8.h * task.attempt }

    // Retry and error handling
    maxRetries = 3
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }

    // Queue status check frequency
    queueStatInterval = '10 min'

    // Logging of environment and resource use
    echo = true
}

// --------------------------------------------------------------
// Optional: queue overrides by label (useful for special modules)
// --------------------------------------------------------------
withLabel:process_high_memory {
    queue = 'highmem'
}

withLabel:process_long {
    queue = 'longrun'
}

withLabel:gpu {
    queue = 'gpu'
    clusterOptions = '--gres=gpu:1'
}

// Default fallback queue
process.queue = 'longrun'
